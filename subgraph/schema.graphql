type Player @entity {
  "0x prefixed hex string, zero padded"
  id: ID!
  initTimestamp: Int!
  "allows null because 0x0000000000000000000000000000000000000000 has no homeWorld"
  homeWorld: Planet
  score: BigInt!
  destroyedScore: BigInt!
  lastRevealTimestamp: Int!
  planets: [Planet!]! @derivedFrom(field: "owner")
  sentVoyages: [Arrival!]! @derivedFrom(field: "player")
  "NOTE: Does not reflect current ownership"
  artifactsDiscovered: [Artifact!]! @derivedFrom(field: "discoverer")
}

type Planet @entity {
  "locationId: 0 padded hex value of locationDec, no 0x prefix"
  id: ID!
  "decimal version of locationid"
  locationDec: BigInt!
  owner: Player!
  isInitialized: Boolean!
  "Seconds since epoch, needs to be multiplied by 1000 for javascript representation"
  createdAt: Int!
  "Seconds since epoch, needs to be multiplied by 1000 for javascript representation"
  lastUpdated: Int!
  perlin: Int!
  range: Int!
  "Value divided by 100 for percentage. Less than 100 is negative"
  speed: Int!
  "Value divided by 100 for percentage. Less than 100 is negative"
  defense: Int!
  "NOTE: This needs to be divided by 1000. NOTE: This is stored lazily and needs to be updated from lastUpdated to current time"
  milliEnergyLazy: BigInt!
  "NOTE: This needs to be divided by 1000"
  milliEnergyCap: BigInt!
  "NOTE: This needs to be divided by 1000"
  milliEnergyGrowth: BigInt!
  "NOTE: This needs to be divided by 1000. NOTE: This is stored lazily and needs to be updated from lastUpdated to current time"
  milliSilverLazy: BigInt!
  "NOTE: This needs to be divided by 1000"
  milliSilverCap: BigInt!
  "NOTE: This needs to be divided by 1000"
  milliSilverGrowth: BigInt!
  planetLevel: Int!
  defenseUpgrades: Int!
  rangeUpgrades: Int!
  speedUpgrades: Int!
  isEnergyCapBoosted: Boolean!
  isEnergyGrowthBoosted: Boolean!
  isRangeBoosted: Boolean!
  isSpeedBoosted: Boolean!
  isDefenseBoosted: Boolean!
  hatLevel: Int!
  planetType: PlanetType!
  spaceType: SpaceType!
  destroyed: Boolean!
  isHomePlanet: Boolean!
  hat: Hat

  # revealed coords
  "Whether this planet's location has been revealed"
  isRevealed: Boolean!
  "planet's x,y coordinate, if revealed"
  revealedCoordinate: RevealedCoordinate
  revealedRadius: Int!

  # artifacts
  hasTriedFindingArtifact: Boolean!
  prospectedBlockNumber: Int
  artifacts: [Artifact!]! @derivedFrom(field: "onPlanet")
  activatedArtifact: Artifact
  incomingWormholes: [Artifact!]! @derivedFrom(field: "wormholeTo")

  # voyages
  voyagesFrom: [Arrival!]! @derivedFrom(field: "fromPlanet")
  voyagesTo: [Arrival!]! @derivedFrom(field: "toPlanet")
}

"Scheduled arrivals by arrival blocktime"
type ArrivalQueue @entity {
  "decimal arrivalTime in seconds as a string"
  id: ID!
  arrivals: [Arrival!]!
}

"Internal type to store internal variables"
type Meta @entity {
  id: ID!
  "the last block timestamp in seconds that was processed"
  lastProcessed: Int!
  "last block number processed"
  blockNumber: Int!
  "Internal use only: the planet IDs we need to refresh with contract data"
  _currentlyRefreshingPlanets: [BigInt!]!
  "Internal use only: the artifact IDs we need to refresh with contract data"
  _currentlyRefreshingArtifacts: [BigInt!]!
  "Internal use only: the voyage IDs we need to refresh with contract data"
  _currentlyAddingVoyages: [BigInt!]!
}

type Arrival @entity {
  "decimal arrivalid as a string"
  id: ID!
  "same as id, but sortable because its an int"
  arrivalId: Int!
  player: Player!
  fromPlanet: Planet!
  toPlanet: Planet!
  "NOTE: This needs to be divided by 1000"
  milliEnergyArriving: BigInt!
  "NOTE: This needs to be divided by 1000"
  milliSilverMoved: BigInt!
  "Seconds since epoch, needs to be multiplied by 1000 for javascript representation"
  departureTime: Int!
  "Seconds since epoch, needs to be multiplied by 1000 for javascript representation"
  arrivalTime: Int!
  "Type of the arrival"
  arrivalType: ArrivalType!
  "Distance traveled"
  distance: Int!
  carriedArtifact: Artifact

  "whether this arrival has already been applied"
  arrived: Boolean!
}

type Hat @entity {
  "0 padded hex version of locationDec, no 0x prefix"
  id: ID!
  "same as id, but linked to planets entity"
  planet: Planet!
  hatLevel: Int!
  "Seconds since epoch, needs to be multiplied by 1000 for javascript representation"
  purchaseTimestamps: [Int!]!
  purchasers: [ID!]! # these are eth addresses
}

"A revealed location"
type RevealedCoordinate @entity {
  "locationId: 0 padded hex value of locationDec, no 0x prefix"
  id: ID!
  x: Int!
  y: Int!
  revealer: Player!
}

enum PlanetType {
  PLANET
  SILVER_MINE
  RUINS
  TRADING_POST
  SILVER_BANK
}

enum PlanetEventType {
  ARRIVAL
}

enum SpaceType {
  NEBULA
  SPACE
  DEEP_SPACE
  DEAD_SPACE
}

type Artifact @entity {
  "0 padded hex, no 0x prefix, recommend sorting using mintedAtTimestamp"
  id: ID!
  "decimal version of artifact ID"
  idDec: BigInt!
  planetDiscoveredOn: Planet
  rarity: ArtifactRarity!
  planetBiome: Biome!
  "Seconds since epoch, needs to be multiplied by 1000 for javascript representation"
  mintedAtTimestamp: Int!
  discoverer: Player!
  artifactType: ArtifactType!

  lastActivated: Int!
  lastDeactivated: Int!
  isActivated: Boolean!

  wormholeTo: Planet

  "Modifier applied to natural planet variable. Less than 100 is negative"
  energyCapMultiplier: Int!
  "Modifier applied to natural planet variable. Less than 100 is negative"
  energyGrowthMultiplier: Int!
  "Modifier applied to natural planet variable. Less than 100 is negative"
  rangeMultiplier: Int!
  "Modifier applied to natural planet variable. Less than 100 is negative"
  speedMultiplier: Int!
  "Modifier applied to natural planet variable. Less than 100 is negative"
  defenseMultiplier: Int!

  "Note: Eth address not Player because could be sent to non game address"
  ownerAddress: ID!
  onPlanet: Planet
  onVoyage: Arrival
}

enum ArtifactType {
  UNKNOWN
  MONOLITH
  COLOSSUS
  SPACESHIP
  PYRAMID
  WORMHOLE
  PLANETARYSHIELD
  PHOTOIDCANNON
  BLOOMFILTER
  BLACKDOMAIN
}

enum Biome {
  UNKNOWN
  OCEAN
  FOREST
  GRASSLAND
  TUNDRA
  SWAMP
  DESERT
  ICE
  WASTELAND
  LAVA
  CORRUPTED
}

enum ArtifactRarity {
  UNKNOWN
  COMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
}

enum ArrivalType {
  UNKNOWN
  NORMAL
  PHOTOID
  WORMHOLE
}
